{"version":3,"sources":["reducers/userDetailsReducer.js","actions/userDetailsActions.js","sagas/Api.js","sagas/loginSaga.js","sagas/registerSaga.js","sagas/GetUsersSaga.js","sagas/userDetailsSaga.js","sagas/deleteUserSaga.js","sagas/rootSaga.js","store/configureStore.js","components/InputComponent.js","components/LoginPage.js","components/Dashboard.js","components/Register.js","components/UserDetails.js","components/NotFoundPage.js","components/Header.js","router/PrivateRoute.js","router/PublicRoute.js","router/AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["initialState","users","viewUser","isLoggedIn","authError","token","info","status","page","email","totalPages","state","action","type","payload","userData","getUsers","pageNo","validateUserApi","axios","post","registerApi","validateUser","userSaga","password","Api","response","put","data","takeEvery","registerUser","registerSaga","usersList","getUserSaga","select","getPage","get","total_pages","userDetails","userDetailsSaga","userId","userDelete","userDeleteSaga","id","delete","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Input","name","placeholder","onChange","className","Fragment","defaultProps","LoginPage","props","useSelector","dispatch","useDispatch","useState","setEmail","setPassword","useEffect","onSubmit","e","loginInput","preventDefault","persist","value","target","to","Dashboard","length","colSpan","map","user","index","first_name","last_name","key","onClick","disabled","Register","UserDetails","profilePic","avatar","parseInt","match","params","src","width","height","confirmAlert","title","message","buttons","label","history","push","NotFoundPage","Header","connect","isAuthenticated","Component","component","rest","AppRouter","path","exact","store","createStore","userDetailsReducer","applyMiddleware","run","configureStore","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.24a12e4c.chunk.js","sourcesContent":["const initialState = {\r\n    users: [],\r\n    viewUser: '',\r\n    isLoggedIn: false,\r\n    authError: null,\r\n    token: '',\r\n    info: '',\r\n    status: false,\r\n    page: 1,\r\n    email: '',\r\n    totalPages: 0\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case \"REGISTER_SUCCESS\":\r\n        case \"REGISTER_FAIL\":\r\n        case \"SET_LOGIN_STATE\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n\r\n        case \"LOGIN_FAIL\": {\r\n            return {\r\n                ...state,\r\n                authError: action.authError\r\n            }\r\n        }\r\n\r\n        case \"LOAD_USERS\": {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case \"DELETE_USER\": {\r\n            return {\r\n                ...state\r\n            }\r\n        }\r\n        case \"LOAD_USER_DATA\": {\r\n            return {\r\n                ...state,\r\n                viewUser: action.userData\r\n            }\r\n        }\r\n        case \"NEXT_PAGE\":\r\n        case \"PREV_PAGE\": {\r\n            return {\r\n                ...state,\r\n                page: action.page\r\n            }\r\n        }\r\n\r\n        case \"TOTAL_PAGES\": {\r\n            return {\r\n                ...state,\r\n                totalPages: action.totalPages\r\n            }\r\n        }\r\n\r\n\r\n        case 'LOGOUT': {\r\n            return {\r\n                ...initialState\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n} ","export const setLogin = (loginData) => {\r\n    return {\r\n        type: \"SET_LOGIN_STATE\",\r\n        payload: loginData\r\n    }\r\n}\r\n\r\nexport const loginFail = (authError) => {\r\n    return {\r\n        type: \"LOGIN_FAIL\",\r\n        authError\r\n    }\r\n}\r\n\r\nexport function userFetch(loginInput) {\r\n    return ({ type: 'USER_FETCH', ...loginInput })\r\n};\r\n\r\n\r\nexport const registerSuccess = (data) => {\r\n    return {\r\n        type: \"REGISTER_SUCCESS\",\r\n        payload: data\r\n    }\r\n}\r\nexport const registerFail = (error) => {\r\n    return {\r\n        type: \"REGISTER_FAIL\",\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport function userRegister(userData) {\r\n    return ({ type: 'USER_REGISTER', ...userData })\r\n};\r\n\r\nexport const loadUsers = (users) => {\r\n    return {\r\n        type: 'LOAD_USERS',\r\n        users\r\n    }\r\n}\r\n\r\nexport const prevPage = (currentPage) => {\r\n    return {\r\n        type: 'PREV_PAGE',\r\n        page: currentPage - 1\r\n    }\r\n}\r\nexport const nextPage = (currentPage) => {\r\n    return {\r\n        type: 'NEXT_PAGE',\r\n        page: currentPage + 1\r\n    }\r\n}\r\n\r\nexport const totalPages = (totalPages) => ({\r\n    type: 'TOTAL_PAGES',\r\n    totalPages\r\n});\r\n\r\nexport function getUsers(pageNo = 1) {\r\n    return ({ type: 'GET_USERS', pageNo });\r\n}\r\n\r\nexport const loadUserData = (userData) => {\r\n    return {\r\n        type: 'LOAD_USER_DATA',\r\n        userData\r\n    }\r\n}\r\n\r\nexport function getUserDetails(userId) {\r\n    return ({ type: 'USER_DETAILS', userId });\r\n}\r\n\r\n\r\nexport const deleteUser = () => {\r\n    return {\r\n        type: 'DELETE_USER'\r\n    }\r\n}\r\n\r\nexport const deleteUserData = () => {\r\n    return {\r\n        type: 'DELETE_USER_DATA'\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: 'LOGOUT',\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport function deleteUserApi(id) { return axios.delete(`https://reqres.in/api/users/${id}`); };\r\n\r\nexport function getUsersApi(page) { return axios.get(`https://reqres.in/api/users?page=${page}`); };\r\n\r\nexport function validateUserApi(userData) { return axios.post(`https://reqres.in/api/login`, userData); };\r\n\r\nexport function registerApi(userData) { return axios.post(`https://reqres.in/api/register`, userData); };\r\n\r\nexport function userDetailsApi(userId) { return axios.get(`https://reqres.in/api/users/${userId}`); };\r\n","import { put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { setLogin, loginFail } from '../actions/userDetailsActions';\r\nimport * as Api from './Api';\r\n\r\n//worker saga\r\nfunction* validateUser(action) {\r\n    const userData = { email: action.email, password: action.password };\r\n    let response;\r\n    try {\r\n        response = yield Api.validateUserApi(userData);\r\n        if (response.status >= 200 && response.status <= 299) {\r\n            yield put(setLogin({ ...response.data, isLoggedIn: true, authError: null, email: action.email }))\r\n        }\r\n    }\r\n    catch (e) {\r\n        yield put(loginFail('Please enter valid email and password'));\r\n    }\r\n}\r\n\r\n//watcher saga\r\nexport function* userSaga() {\r\n    yield takeEvery(\"USER_FETCH\", validateUser);\r\n}","import { put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { registerSuccess, registerFail } from '../actions/userDetailsActions';\r\nimport * as Api from './Api';\r\n\r\n//worker saga\r\nfunction* registerUser(action) {\r\n    const userData = { email: action.email, password: action.password };\r\n    let response;\r\n    try {\r\n        response = yield Api.registerApi(userData);\r\n        if (response.status >= 200 && response.status <= 299) {\r\n            yield put(registerSuccess({ info: '', status: true }))\r\n        }\r\n    }\r\n    catch (e) {\r\n        yield put(registerFail({ info: 'Please fill valid email & password', status: false }));\r\n    }\r\n}\r\n\r\n//watcher saga\r\nexport function* registerSaga() {\r\n    const action = yield takeEvery(\"USER_REGISTER\", registerUser);\r\n}","import { put, takeEvery, select } from 'redux-saga/effects';\r\nimport { loadUsers, totalPages } from '../actions/userDetailsActions';\r\nimport * as Api from './Api';\r\n\r\n//worker saga\r\nfunction* usersList(action) {\r\n    const getPage = yield select(state => state.page);\r\n    let response;\r\n    try {\r\n        response = yield Api.getUsersApi(getPage);\r\n        if (response.status >= 200 && response.status <= 299) {\r\n            yield put(loadUsers(response.data.data));\r\n            debugger;\r\n            yield put(totalPages(response.data.total_pages));\r\n        }\r\n    }\r\n    catch (e) {\r\n    }\r\n}\r\n\r\n//watcher saga\r\nexport function* getUserSaga() {\r\n    yield takeEvery(\"GET_USERS\", usersList);\r\n}\r\n","import { put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { loadUserData } from '../actions/userDetailsActions';\r\nimport * as Api from './Api';\r\n\r\n//worker saga\r\nfunction* userDetails(action) {\r\n    let response;\r\n    try {\r\n        response = yield Api.userDetailsApi(action.userId);\r\n        yield put(loadUserData(response.data.data));\r\n    }\r\n    catch (e) {\r\n    }\r\n}\r\n\r\n//watcher saga\r\nexport function* userDetailsSaga() {\r\n    yield takeEvery(\"USER_DETAILS\", userDetails);\r\n}","import { put, takeEvery } from 'redux-saga/effects';\r\nimport { deleteUser } from '../actions/userDetailsActions';\r\nimport * as Api from './Api';\r\n\r\n//worker saga\r\nfunction* userDelete(action) {\r\n    let response;\r\n    try {\r\n        response = yield Api.deleteUserApi(action.id);\r\n        yield put(deleteUser());\r\n    }\r\n    catch (e) {\r\n    }\r\n}\r\n\r\n//watcher saga\r\nexport function* userDeleteSaga() {\r\n    yield takeEvery(\"DELETE_USER_DATA\", userDelete);\r\n}","import { all, fork } from 'redux-saga/effects';\r\nimport { userSaga } from '../sagas/loginSaga';\r\nimport { registerSaga } from '../sagas/registerSaga';\r\nimport { getUserSaga } from '../sagas/GetUsersSaga';\r\nimport { userDetailsSaga } from '../sagas/userDetailsSaga';\r\nimport { userDeleteSaga } from '../sagas/deleteUserSaga';\r\n\r\nexport default function* rootSaga() {\r\n    yield all(\r\n        [fork(userSaga),\r\n        fork(registerSaga),\r\n        fork(getUserSaga),\r\n        fork(userDetailsSaga),\r\n        fork(userDeleteSaga)\r\n        ]);\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport userDetailsReducer from '../reducers/userDetailsReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas/rootSaga';\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default () => {\r\n    const store = createStore(\r\n        userDetailsReducer,\r\n        composeEnhancers(applyMiddleware(sagaMiddleware))\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n\r\n    // run the saga\r\n    sagaMiddleware.run(rootSaga);\r\n\r\n    return store;\r\n};\r\n\r\n","import React from 'react';\r\n\r\nconst Input = ({\r\n    name,\r\n    type,\r\n    placeholder,\r\n    onChange,\r\n    className,\r\n    id,\r\n    ...props\r\n}) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <input\r\n                id={id}\r\n                name={name}\r\n                type={type}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                className={className}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nInput.defaultProps = {\r\n    type: \"text\",\r\n    className: \"\"\r\n}\r\n\r\nexport default Input;","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport Input from './InputComponent';\r\nimport { userFetch, logout } from \"../actions/userDetailsActions\";\r\n\r\n\r\nconst LoginPage = (props) => {\r\n    const { authError } = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    //on load\r\n    useEffect(() => {\r\n        dispatch(logout());\r\n    }, []);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        e.persist();\r\n        dispatch(userFetch({ email, password }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"box-layout\" >\r\n            <form onSubmit={handleSubmit}>\r\n                <h2 className=\"text-center\">React Login</h2>\r\n                <div className=\"form-group\">\r\n                    <Input\r\n                        id=\"inputEmail\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Email address\"\r\n                        onChange={(e) => { const value = e.target.value; setEmail(value) }}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword\"\r\n                        placeholder=\"Enter password\"\r\n                        onChange={(e) => { const value = e.target.value; setPassword(value) }}\r\n                    />\r\n                </div>\r\n                <button className=\"btn btn-primary btn-block\">Login</button>\r\n                {authError && <p className=\"info-error\">{authError}</p>}\r\n            </form>\r\n            <p className=\"text-center\">\r\n                <button className=\"btn btn-link ml-auto\">\r\n                    <Link to=\"/register\">Register</Link>\r\n                </button>\r\n            </p>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage;","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUsers, prevPage, nextPage } from '../actions/userDetailsActions';\r\n\r\nconst Dashboard = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { page, users: usersList, totalPages } = useSelector(state => state);\r\n    useEffect(() => {\r\n        dispatch(getUsers());\r\n    }, []);\r\n\r\n    const handlePrevPage = () => {\r\n        dispatch(prevPage(page));\r\n        dispatch(getUsers());\r\n    }\r\n    const handleNextPage = () => {\r\n        dispatch(nextPage(page));\r\n        dispatch(getUsers());\r\n    }\r\n\r\n    const renderUsersData = () => {\r\n        if (usersList.length <= 0) return (<tr><td colSpan=\"3\" className=\"text-center\">No data Found</td></tr>)\r\n        return usersList.map((user, index) => {\r\n            const { email, first_name, last_name, id } = user;\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{<Link to={`/user/${id}`}>{email}</Link>}</td>\r\n                    <td>{first_name}</td>\r\n                    <td>{last_name}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"dashboard-wrapper\">\r\n            <h3 className=\"text-center m-2\">Dashboard</h3>\r\n            <table id=\"userTable\" className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Email</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {renderUsersData()}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"buttons-wrapper\">\r\n                <button onClick={handlePrevPage} disabled={page <= 1}>&lt;</button>\r\n                <span>{page}</span>\r\n                <button onClick={handleNextPage}\r\n                    disabled={page >= totalPages}\r\n                >&gt;</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Input from './InputComponent';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { userRegister, logout } from '../actions/userDetailsActions';\r\n\r\nconst Register = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { info, status } = useSelector(state => state);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    useEffect(() => {\r\n        dispatch(logout());\r\n    }, []);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        e.persist();\r\n        dispatch(userRegister({ email, password }));\r\n    }\r\n\r\n    if (status) return <Redirect to=\"/login\" />\r\n    return (<div className=\"box-layout\">\r\n        <form onSubmit={handleSubmit}>\r\n            <h2 className=\"text-center\">Registration Form</h2>\r\n            <div className=\"form-group\">\r\n                <Input\r\n                    id=\"inputEmail\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Email address\"\r\n                    onChange={(e) => { const value = e.target.value; setEmail(value) }}\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <Input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    className=\"form-control\"\r\n                    id=\"inputPassword\"\r\n                    placeholder=\"Enter password\"\r\n                    onChange={(e) => { const value = e.target.value; setPassword(value) }}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary btn-block mr-4\">\r\n                Submit\r\n                </button>\r\n            <p className=\"info-error\">{info}</p>\r\n        </form>\r\n    </div>);\r\n\r\n}\r\n\r\nexport default Register;\r\n","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUserDetails, deleteUserData } from '../actions/userDetailsActions';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\nconst UserDetails = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { viewUser } = useSelector(state => state);\r\n    const { avatar: profilePic, first_name, last_name, email } = viewUser;\r\n\r\n    useEffect(() => {\r\n        const id = parseInt(props.match.params.id);\r\n        dispatch(getUserDetails(id));\r\n    }, []);\r\n\r\n    const handleDelete = () => {\r\n        confirmAlert({\r\n            title: 'Confirm to delete',\r\n            message: 'Do you want to delete this user details?',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: () => {\r\n                        const id = parseInt(props.match.params.id);\r\n                        dispatch(deleteUserData(id));\r\n                        props.history.push('/dashboard');\r\n                    }\r\n                },\r\n                {\r\n                    label: 'No',\r\n                    onClick: () => { }\r\n                }\r\n            ]\r\n        });\r\n\r\n    }\r\n\r\n    if (!viewUser) return (<div className=\"user-details font-weight-bold\">Loading...</div>);\r\n    return (\r\n        <div>\r\n            <button className=\"btn btn-link\">\r\n                <Link to=\"/dashboard\">Go to Dashboard</Link>\r\n            </button>\r\n            <div className=\"user-details\">\r\n                <img src={profilePic} width=\"180\" height=\"180\" />\r\n                <div className=\"user-email\">{email}</div>\r\n                <div className=\"user-name\">{`${first_name}${last_name}`}</div>\r\n                <button className=\"btn btn-outline-danger\" onClick={handleDelete}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserDetails;\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFoundPage = () => {\r\n    return (\r\n        <>\r\n            <div className=\"error-page\">\r\n                <div><b>404</b> Page Not Found!!</div>\r\n                <Link to=\"/login\">Login to view users</Link>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../actions/userDetailsActions';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\n\r\nconst Header = (props) => {\r\n    const dispatch = useDispatch();\r\n    const email = useSelector(state => state.email);\r\n\r\n    const handleLogout = () => {\r\n        confirmAlert({\r\n            title: 'Confirm to logout',\r\n            message: 'Do you want to logout',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: () => dispatch(logout())\r\n                },\r\n                {\r\n                    label: 'No',\r\n                    onClick: () => { }\r\n                }\r\n            ]\r\n        });\r\n\r\n    }\r\n    return (\r\n        <div className=\"d-flex header\">\r\n            <span className=\"project-name\">\r\n                React JS\r\n            </span>\r\n            <div className=\"user-wrapper\">\r\n                <span>{email}</span>\r\n                <button className=\"btn\" onClick={handleLogout}>Logout</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport Header from '../components/Header';\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n        <Route {...rest} component={(props) => (\r\n            isAuthenticated ? (\r\n                <div>\r\n                    <Header />\r\n                    <Component {...props} />\r\n                </div>\r\n            ) : (\r\n                    <Redirect to=\"/login\" />\r\n                )\r\n        )} />\r\n    );\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: state.isLoggedIn\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n        <Route {...rest} component={(props) => (\r\n            isAuthenticated ? (\r\n                <Redirect to=\"/dashboard\" />\r\n            ) : (\r\n                    <Component {...props} />\r\n                )\r\n        )} />\r\n    );\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: state.isLoggedIn\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);","import React from 'react';\r\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport LoginPage from '../components/LoginPage';\r\nimport Dashboard from '../components/Dashboard';\r\nimport Register from '../components/Register';\r\nimport UserDetails from '../components/UserDetails';\r\nimport NotFoundPage from '../components/NotFoundPage';\r\nimport PrivateRoute from '../router/PrivateRoute';\r\nimport PublicRoute from '../router/PublicRoute';\r\n\r\n\r\nconst AppRouter = (props) => (\r\n    <HashRouter {...props}>\r\n        <div>\r\n            <Switch>\r\n                <Route path=\"/\" exact><Redirect to=\"/login\" /></Route>\r\n                <PublicRoute path=\"/login\" component={LoginPage} />\r\n                <PrivateRoute path=\"/dashboard\" component={Dashboard} />\r\n                <PublicRoute path=\"/register\" component={Register} />\r\n                <PrivateRoute path=\"/user/:id\" component={UserDetails} />\r\n                <Route component={NotFoundPage} />\r\n            </Switch>\r\n        </div>\r\n    </HashRouter>\r\n);\r\n\r\nexport default AppRouter;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport AppRouter from './router/AppRouter';\n\nimport './App.css';\n\nconst store = configureStore();\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles/styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}